class TrieNode{
    public:
    bool isEnd;
    vector<TrieNode*> child;
    TrieNode(){
        isEnd=false;
        child=vector<TrieNode*>(26,NULL);
    }
};

class Trie{
    private:
    TrieNode* root;
    public:
    TrieNode* getRoot()
    {
        return root;
    }
    Trie(vector<string> words)
    {
        root=new TrieNode();
        for(int i=0;i<words.size();i++){
            addword(words[i]);
        }
    }
    
    void addword(string s){
        TrieNode* tmp = root; 
        for(int i=0;i<s.size();i++)
        {
            int ind = s[i]-'a';
            if(tmp->child[ind]==NULL){
                tmp->child[ind]=new TrieNode();
            }
            tmp=tmp->child[ind];
        }
    tmp->isEnd=true;
    }
};

class Solution {
public:
    unordered_set<string> ans;
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
    Trie *tri=new Trie(words);
    TrieNode* root=tri->getRoot();
    for(int i=0;i<board.size();i++)
    {
        for(int j=0;j<board[0].size();j++)
        {
             find(board,i,j,"",root);
        }
    }
        vector<string> res; 
        for(string str : ans)
        {
            res.push_back(str);
        }
        return res;  
    }
    
    void find(vector<vector<char>>&board,int x,int y,string s,TrieNode *root){
       if(x<0 || y<0 || x>=board.size() || y>=board[0].size() || board[x][y] == ' ')return;
        if(root->child[board[x][y] - 'a']) {
            root = root->child[board[x][y] - 'a'];
            s = s + board[x][y];
            if(root->isEnd)ans.insert(s);
            char c = board[x][y];
            board[x][y] = ' ';
            find(board,x+1,y,s,root);
            find(board,x,y+1,s,root);
            find(board,x,y-1,s,root);
            find(board,x-1,y,s,root);
            board[x][y] = c;
        }
        
    }
};
